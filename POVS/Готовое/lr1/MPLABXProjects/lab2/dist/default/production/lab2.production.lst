

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Mar 30 19:56:41 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x4E,2
    18  0000                     
    19                           ; Version 1.41
    20                           ; Generated 25/01/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F84A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  0081                     	;# 
    65  0085                     	;# 
    66  0086                     	;# 
    67  0088                     	;# 
    68  0089                     	;# 
    69                           
    70                           	psect	idataBANK0
    71  015D                     __pidataBANK0:	
    72                           
    73                           ;initializer for _digits
    74  015D  3480               	retlw	128
    75  015E  34F2               	retlw	242
    76  015F  3448               	retlw	72
    77  0160  3460               	retlw	96
    78  0161  3432               	retlw	50
    79  0162  3424               	retlw	36
    80  0163  3404               	retlw	4
    81  0164  34F0               	retlw	240
    82  0165  3400               	retlw	0
    83  0166  3420               	retlw	32
    84  0001                     _TMR0	set	1
    85  0006                     _PORTB	set	6
    86  0005                     _PORTA	set	5
    87  005D                     _T0IE	set	93
    88  005C                     _INTE	set	92
    89  005F                     _GIE	set	95
    90  005A                     _T0IF	set	90
    91  0059                     _INTF	set	89
    92  0086                     _TRISB	set	134
    93  0085                     _TRISA	set	133
    94  040E                     _INTEDG	set	1038
    95  040A                     _PS2	set	1034
    96  0409                     _PS1	set	1033
    97  0408                     _PS0	set	1032
    98  040B                     _PSA	set	1035
    99  040C                     _T0SE	set	1036
   100  040D                     _T0CS	set	1037
   101                           
   102                           	psect	cinit
   103  0010                     start_initialization:	
   104                           ; #config settings
   105                           
   106  0010                     __initialization:	
   107                           
   108                           ; Initialize objects allocated to BANK0
   109  0010  215D               	fcall	__pidataBANK0	;fetch initializer
   110  0011  00A4               	movwf	__pdataBANK0& (0+127)
   111  0012  215E               	fcall	__pidataBANK0+1	;fetch initializer
   112  0013  00A5               	movwf	(__pdataBANK0+1)& (0+127)
   113  0014  215F               	fcall	__pidataBANK0+2	;fetch initializer
   114  0015  00A6               	movwf	(__pdataBANK0+2)& (0+127)
   115  0016  2160               	fcall	__pidataBANK0+3	;fetch initializer
   116  0017  00A7               	movwf	(__pdataBANK0+3)& (0+127)
   117  0018  2161               	fcall	__pidataBANK0+4	;fetch initializer
   118  0019  00A8               	movwf	(__pdataBANK0+4)& (0+127)
   119  001A  2162               	fcall	__pidataBANK0+5	;fetch initializer
   120  001B  00A9               	movwf	(__pdataBANK0+5)& (0+127)
   121  001C  2163               	fcall	__pidataBANK0+6	;fetch initializer
   122  001D  00AA               	movwf	(__pdataBANK0+6)& (0+127)
   123  001E  2164               	fcall	__pidataBANK0+7	;fetch initializer
   124  001F  00AB               	movwf	(__pdataBANK0+7)& (0+127)
   125  0020  2165               	fcall	__pidataBANK0+8	;fetch initializer
   126  0021  00AC               	movwf	(__pdataBANK0+8)& (0+127)
   127  0022  2166               	fcall	__pidataBANK0+9	;fetch initializer
   128  0023  00AD               	movwf	(__pdataBANK0+9)& (0+127)
   129                           
   130                           ; Clear objects allocated to BANK0
   131  0024  01AE               	clrf	__pbssBANK0& (0+127)
   132  0025  01AF               	clrf	(__pbssBANK0+1)& (0+127)
   133  0026  01B0               	clrf	(__pbssBANK0+2)& (0+127)
   134  0027  01B1               	clrf	(__pbssBANK0+3)& (0+127)
   135  0028  01B2               	clrf	(__pbssBANK0+4)& (0+127)
   136  0029                     end_of_initialization:	
   137                           ;End of C runtime variable initialization code
   138                           
   139  0029                     __end_of__initialization:	
   140  0029  0183               	clrf	3
   141  002A  28BC               	ljmp	_main	;jump to C main() function
   142                           
   143                           	psect	bssBANK0
   144  002E                     __pbssBANK0:	
   145  002E                     _seconds:	
   146  002E                     	ds	2
   147  0030                     _sub_seconds:	
   148  0030                     	ds	2
   149  0032                     _enabled:	
   150  0032                     	ds	1
   151                           
   152                           	psect	dataBANK0
   153  0024                     __pdataBANK0:	
   154  0024                     _digits:	
   155  0024                     	ds	10
   156                           
   157                           	psect	cstackCOMMON
   158  0000                     __pcstackCOMMON:	
   159  0000                     ??_main:	
   160                           
   161                           	psect	cstackBANK0
   162  000C                     __pcstackBANK0:	
   163                           ; 1 bytes @ 0x0
   164                           
   165  000C                     ?_isr:	
   166  000C                     ??_isr:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  000C                     ?_main:	
   170                           ; 1 bytes @ 0x0
   171                           
   172                           
   173                           ; 1 bytes @ 0x0
   174  000C                     	ds	4
   175  0010                     ?___lwdiv:	
   176  0010                     ___lwdiv@divisor:	
   177                           ; 2 bytes @ 0x4
   178                           
   179                           
   180                           ; 2 bytes @ 0x4
   181  0010                     	ds	2
   182  0012                     ___lwdiv@dividend:	
   183                           
   184                           ; 2 bytes @ 0x6
   185  0012                     	ds	2
   186  0014                     ??___lwdiv:	
   187                           
   188                           ; 1 bytes @ 0x8
   189  0014                     	ds	1
   190  0015                     ___lwdiv@quotient:	
   191                           
   192                           ; 2 bytes @ 0x9
   193  0015                     	ds	2
   194  0017                     ___lwdiv@counter:	
   195                           
   196                           ; 1 bytes @ 0xB
   197  0017                     	ds	1
   198  0018                     ?___lwmod:	
   199  0018                     ___lwmod@divisor:	
   200                           ; 2 bytes @ 0xC
   201                           
   202                           
   203                           ; 2 bytes @ 0xC
   204  0018                     	ds	2
   205  001A                     ___lwmod@dividend:	
   206                           
   207                           ; 2 bytes @ 0xE
   208  001A                     	ds	2
   209  001C                     ??___lwmod:	
   210                           
   211                           ; 1 bytes @ 0x10
   212  001C                     	ds	1
   213  001D                     ___lwmod@counter:	
   214                           
   215                           ; 1 bytes @ 0x11
   216  001D                     	ds	1
   217  001E                     ?_DisplayDigit:	
   218  001E                     DisplayDigit@position:	
   219                           ; 1 bytes @ 0x12
   220                           
   221                           
   222                           ; 1 bytes @ 0x12
   223  001E                     	ds	1
   224  001F                     ??_DisplayDigit:	
   225                           
   226                           ; 1 bytes @ 0x13
   227  001F                     	ds	1
   228  0020                     DisplayDigit@data:	
   229                           
   230                           ; 1 bytes @ 0x14
   231  0020                     	ds	1
   232  0021                     ?_DisplayData:	
   233  0021                     DisplayData@data:	
   234                           ; 1 bytes @ 0x15
   235                           
   236                           
   237                           ; 2 bytes @ 0x15
   238  0021                     	ds	2
   239  0023                     ??_DisplayData:	
   240                           
   241                           ; 1 bytes @ 0x17
   242  0023                     	ds	1
   243                           
   244                           	psect	maintext
   245  00BC                     __pmaintext:	
   246 ;;
   247 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   248 ;;
   249 ;; *************** function _main *****************
   250 ;; Defined at:
   251 ;;		line 69 in file "newmain.c"
   252 ;; Parameters:    Size  Location     Type
   253 ;;		None
   254 ;; Auto vars:     Size  Location     Type
   255 ;;		None
   256 ;; Return value:  Size  Location     Type
   257 ;;                  1    wreg      void 
   258 ;; Registers used:
   259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   260 ;; Tracked objects:
   261 ;;		On entry : B00/0
   262 ;;		On exit  : 0/0
   263 ;;		Unchanged: 0/0
   264 ;; Data sizes:     COMMON   BANK0
   265 ;;      Params:         0       0
   266 ;;      Locals:         0       0
   267 ;;      Temps:          0       0
   268 ;;      Totals:         0       0
   269 ;;Total ram usage:        0 bytes
   270 ;; Hardware stack levels required when called:    3
   271 ;; This function calls:
   272 ;;		_DisplayData
   273 ;; This function is called by:
   274 ;;		Startup code after reset
   275 ;; This function uses a non-reentrant model
   276 ;;
   277                           
   278                           
   279                           ;psect for function _main
   280  00BC                     _main:	
   281                           
   282                           ;newmain.c: 72: TMR0 = 58;
   283                           
   284                           ;incstack = 0
   285                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   286  00BC  303A               	movlw	58
   287  00BD  1283               	bcf	3,5	;RP0=0, select bank0
   288  00BE  0081               	movwf	1	;volatile
   289                           
   290                           ;newmain.c: 73: T0CS = 0x00;
   291  00BF  1683               	bsf	3,5	;RP0=1, select bank1
   292  00C0  1281               	bcf	1,5	;volatile
   293                           
   294                           ;newmain.c: 74: T0SE = 0x00;
   295  00C1  1201               	bcf	1,4	;volatile
   296                           
   297                           ;newmain.c: 75: PSA = 0x00;
   298  00C2  1181               	bcf	1,3	;volatile
   299                           
   300                           ;newmain.c: 76: PS0 = 0x01;
   301  00C3  1401               	bsf	1,0	;volatile
   302                           
   303                           ;newmain.c: 77: PS1 = 0x00;
   304  00C4  1081               	bcf	1,1	;volatile
   305                           
   306                           ;newmain.c: 78: PS2 = 0x01;
   307  00C5  1501               	bsf	1,2	;volatile
   308                           
   309                           ;newmain.c: 81: TRISA = 0xF0;
   310  00C6  30F0               	movlw	240
   311  00C7  0085               	movwf	5	;volatile
   312                           
   313                           ;newmain.c: 82: TRISB = 0x01;
   314  00C8  3001               	movlw	1
   315  00C9  0086               	movwf	6	;volatile
   316                           
   317                           ;newmain.c: 83: PORTA = 0x0F;
   318  00CA  300F               	movlw	15
   319  00CB  1283               	bcf	3,5	;RP0=0, select bank0
   320  00CC  0085               	movwf	5	;volatile
   321                           
   322                           ;newmain.c: 84: PORTB = digits[0];
   323  00CD  0824               	movf	_digits,w
   324  00CE  0086               	movwf	6	;volatile
   325                           
   326                           ;newmain.c: 86: GIE = 0;
   327  00CF  138B               	bcf	11,7	;volatile
   328                           
   329                           ;newmain.c: 87: INTEDG = 0;
   330  00D0  1683               	bsf	3,5	;RP0=1, select bank1
   331  00D1  1301               	bcf	1,6	;volatile
   332                           
   333                           ;newmain.c: 88: INTE = 1;
   334  00D2  160B               	bsf	11,4	;volatile
   335                           
   336                           ;newmain.c: 89: T0IE = 1;
   337  00D3  168B               	bsf	11,5	;volatile
   338                           
   339                           ;newmain.c: 90: GIE =1;
   340  00D4  178B               	bsf	11,7	;volatile
   341                           
   342                           ;newmain.c: 92: seconds = 0;
   343  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   344  00D6  01AE               	clrf	_seconds	;volatile
   345  00D7  01AF               	clrf	_seconds+1	;volatile
   346                           
   347                           ;newmain.c: 93: sub_seconds =0;
   348  00D8  01B0               	clrf	_sub_seconds	;volatile
   349  00D9  01B1               	clrf	_sub_seconds+1	;volatile
   350  00DA                     l730:	
   351                           ;newmain.c: 94: while(1)
   352                           
   353                           
   354                           ;newmain.c: 95: {
   355                           ;newmain.c: 96: if (enabled)
   356  00DA  1283               	bcf	3,5	;RP0=0, select bank0
   357  00DB  0832               	movf	_enabled,w	;volatile
   358  00DC  1903               	btfsc	3,2
   359  00DD  28EB               	goto	l738
   360                           
   361                           ;newmain.c: 97: if(sub_seconds == 10){
   362  00DE  300A               	movlw	10
   363  00DF  0630               	xorwf	_sub_seconds,w	;volatile
   364  00E0  0431               	iorwf	_sub_seconds+1,w	;volatile
   365  00E1  1D03               	btfss	3,2
   366  00E2  28EB               	goto	l738
   367                           
   368                           ;newmain.c: 98: seconds++;
   369  00E3  3001               	movlw	1
   370  00E4  07AE               	addwf	_seconds,f	;volatile
   371  00E5  1803               	skipnc
   372  00E6  0AAF               	incf	_seconds+1,f	;volatile
   373  00E7  3000               	movlw	0
   374  00E8  07AF               	addwf	_seconds+1,f	;volatile
   375                           
   376                           ;newmain.c: 99: sub_seconds =0;
   377  00E9  01B0               	clrf	_sub_seconds	;volatile
   378  00EA  01B1               	clrf	_sub_seconds+1	;volatile
   379  00EB                     l738:	
   380                           
   381                           ;newmain.c: 100: }
   382                           ;newmain.c: 101: seconds++;
   383  00EB  3001               	movlw	1
   384  00EC  07AE               	addwf	_seconds,f	;volatile
   385  00ED  1803               	skipnc
   386  00EE  0AAF               	incf	_seconds+1,f	;volatile
   387  00EF  3000               	movlw	0
   388  00F0  07AF               	addwf	_seconds+1,f	;volatile
   389                           
   390                           ;newmain.c: 102: DisplayData(seconds);
   391  00F1  082F               	movf	_seconds+1,w	;volatile
   392  00F2  00A2               	movwf	DisplayData@data+1
   393  00F3  082E               	movf	_seconds,w	;volatile
   394  00F4  00A1               	movwf	DisplayData@data
   395  00F5  202B               	fcall	_DisplayData
   396  00F6  28DA               	goto	l730
   397  00F7                     __end_of_main:	
   398                           
   399                           	psect	text1
   400  002B                     __ptext1:	
   401 ;; *************** function _DisplayData *****************
   402 ;; Defined at:
   403 ;;		line 35 in file "newmain.c"
   404 ;; Parameters:    Size  Location     Type
   405 ;;  data            2   21[BANK0 ] unsigned int 
   406 ;; Auto vars:     Size  Location     Type
   407 ;;		None
   408 ;; Return value:  Size  Location     Type
   409 ;;                  1    wreg      void 
   410 ;; Registers used:
   411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   412 ;; Tracked objects:
   413 ;;		On entry : 0/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMMON   BANK0
   417 ;;      Params:         0       2
   418 ;;      Locals:         0       0
   419 ;;      Temps:          0       1
   420 ;;      Totals:         0       3
   421 ;;Total ram usage:        3 bytes
   422 ;; Hardware stack levels used:    1
   423 ;; Hardware stack levels required when called:    2
   424 ;; This function calls:
   425 ;;		_DisplayDigit
   426 ;;		___lwdiv
   427 ;;		___lwmod
   428 ;; This function is called by:
   429 ;;		_main
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433                           
   434                           ;psect for function _DisplayData
   435  002B                     _DisplayData:	
   436                           
   437                           ;newmain.c: 37: DisplayDigit(data%10, 0);
   438                           
   439                           ;incstack = 0
   440                           ; Regs used in _DisplayData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   441  002B  1283               	bcf	3,5	;RP0=0, select bank0
   442  002C  019E               	clrf	DisplayDigit@position
   443  002D  300A               	movlw	10
   444  002E  0098               	movwf	___lwmod@divisor
   445  002F  3000               	movlw	0
   446  0030  0099               	movwf	___lwmod@divisor+1
   447  0031  0822               	movf	DisplayData@data+1,w
   448  0032  009B               	movwf	___lwmod@dividend+1
   449  0033  0821               	movf	DisplayData@data,w
   450  0034  009A               	movwf	___lwmod@dividend
   451  0035  20F7               	fcall	___lwmod
   452  0036  1283               	bcf	3,5	;RP0=0, select bank0
   453  0037  0818               	movf	?___lwmod,w
   454  0038  2149               	fcall	_DisplayDigit
   455                           
   456                           ;newmain.c: 39: DisplayDigit((data/10)%10, 1);
   457  0039  1283               	bcf	3,5	;RP0=0, select bank0
   458  003A  019E               	clrf	DisplayDigit@position
   459  003B  0A9E               	incf	DisplayDigit@position,f
   460  003C  300A               	movlw	10
   461  003D  0098               	movwf	___lwmod@divisor
   462  003E  3000               	movlw	0
   463  003F  0099               	movwf	___lwmod@divisor+1
   464  0040  300A               	movlw	10
   465  0041  0090               	movwf	___lwdiv@divisor
   466  0042  3000               	movlw	0
   467  0043  0091               	movwf	___lwdiv@divisor+1
   468  0044  0822               	movf	DisplayData@data+1,w
   469  0045  0093               	movwf	___lwdiv@dividend+1
   470  0046  0821               	movf	DisplayData@data,w
   471  0047  0092               	movwf	___lwdiv@dividend
   472  0048  207F               	fcall	___lwdiv
   473  0049  1283               	bcf	3,5	;RP0=0, select bank0
   474  004A  0811               	movf	?___lwdiv+1,w
   475  004B  009B               	movwf	___lwmod@dividend+1
   476  004C  0810               	movf	?___lwdiv,w
   477  004D  009A               	movwf	___lwmod@dividend
   478  004E  20F7               	fcall	___lwmod
   479  004F  1283               	bcf	3,5	;RP0=0, select bank0
   480  0050  0818               	movf	?___lwmod,w
   481  0051  2149               	fcall	_DisplayDigit
   482                           
   483                           ;newmain.c: 41: DisplayDigit((data/100)%10, 2);
   484  0052  3002               	movlw	2
   485  0053  1283               	bcf	3,5	;RP0=0, select bank0
   486  0054  00A3               	movwf	??_DisplayData
   487  0055  0823               	movf	??_DisplayData,w
   488  0056  009E               	movwf	DisplayDigit@position
   489  0057  300A               	movlw	10
   490  0058  0098               	movwf	___lwmod@divisor
   491  0059  3000               	movlw	0
   492  005A  0099               	movwf	___lwmod@divisor+1
   493  005B  3064               	movlw	100
   494  005C  0090               	movwf	___lwdiv@divisor
   495  005D  3000               	movlw	0
   496  005E  0091               	movwf	___lwdiv@divisor+1
   497  005F  0822               	movf	DisplayData@data+1,w
   498  0060  0093               	movwf	___lwdiv@dividend+1
   499  0061  0821               	movf	DisplayData@data,w
   500  0062  0092               	movwf	___lwdiv@dividend
   501  0063  207F               	fcall	___lwdiv
   502  0064  1283               	bcf	3,5	;RP0=0, select bank0
   503  0065  0811               	movf	?___lwdiv+1,w
   504  0066  009B               	movwf	___lwmod@dividend+1
   505  0067  0810               	movf	?___lwdiv,w
   506  0068  009A               	movwf	___lwmod@dividend
   507  0069  20F7               	fcall	___lwmod
   508  006A  1283               	bcf	3,5	;RP0=0, select bank0
   509  006B  0818               	movf	?___lwmod,w
   510  006C  2149               	fcall	_DisplayDigit
   511                           
   512                           ;newmain.c: 43: DisplayDigit(data/1000, 3);
   513  006D  3003               	movlw	3
   514  006E  1283               	bcf	3,5	;RP0=0, select bank0
   515  006F  00A3               	movwf	??_DisplayData
   516  0070  0823               	movf	??_DisplayData,w
   517  0071  009E               	movwf	DisplayDigit@position
   518  0072  30E8               	movlw	232
   519  0073  0090               	movwf	___lwdiv@divisor
   520  0074  3003               	movlw	3
   521  0075  0091               	movwf	___lwdiv@divisor+1
   522  0076  0822               	movf	DisplayData@data+1,w
   523  0077  0093               	movwf	___lwdiv@dividend+1
   524  0078  0821               	movf	DisplayData@data,w
   525  0079  0092               	movwf	___lwdiv@dividend
   526  007A  207F               	fcall	___lwdiv
   527  007B  1283               	bcf	3,5	;RP0=0, select bank0
   528  007C  0810               	movf	?___lwdiv,w
   529  007D  2149               	fcall	_DisplayDigit
   530  007E  0008               	return
   531  007F                     __end_of_DisplayData:	
   532                           
   533                           	psect	text2
   534  00F7                     __ptext2:	
   535 ;; *************** function ___lwmod *****************
   536 ;; Defined at:
   537 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;  divisor         2   12[BANK0 ] unsigned int 
   540 ;;  dividend        2   14[BANK0 ] unsigned int 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  counter         1   17[BANK0 ] unsigned char 
   543 ;; Return value:  Size  Location     Type
   544 ;;                  2   12[BANK0 ] unsigned int 
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMMON   BANK0
   552 ;;      Params:         0       4
   553 ;;      Locals:         0       1
   554 ;;      Temps:          0       1
   555 ;;      Totals:         0       6
   556 ;;Total ram usage:        6 bytes
   557 ;; Hardware stack levels used:    1
   558 ;; Hardware stack levels required when called:    1
   559 ;; This function calls:
   560 ;;		Nothing
   561 ;; This function is called by:
   562 ;;		_DisplayData
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566                           
   567                           ;psect for function ___lwmod
   568  00F7                     ___lwmod:	
   569                           
   570                           ;incstack = 0
   571                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   572  00F7  1283               	bcf	3,5	;RP0=0, select bank0
   573  00F8  0818               	movf	___lwmod@divisor,w
   574  00F9  0419               	iorwf	___lwmod@divisor+1,w
   575  00FA  1903               	btfsc	3,2
   576  00FB  2925               	goto	l680
   577  00FC  019D               	clrf	___lwmod@counter
   578  00FD  0A9D               	incf	___lwmod@counter,f
   579  00FE                     l670:	
   580  00FE  1B99               	btfsc	___lwmod@divisor+1,7
   581  00FF  290C               	goto	l672
   582  0100  3001               	movlw	1
   583  0101                     u295:	
   584  0101  1003               	clrc
   585  0102  0D98               	rlf	___lwmod@divisor,f
   586  0103  0D99               	rlf	___lwmod@divisor+1,f
   587  0104  3EFF               	addlw	-1
   588  0105  1D03               	skipz
   589  0106  2901               	goto	u295
   590  0107  3001               	movlw	1
   591  0108  009C               	movwf	??___lwmod
   592  0109  081C               	movf	??___lwmod,w
   593  010A  079D               	addwf	___lwmod@counter,f
   594  010B  28FE               	goto	l670
   595  010C                     l672:	
   596  010C  0819               	movf	___lwmod@divisor+1,w
   597  010D  021B               	subwf	___lwmod@dividend+1,w
   598  010E  1D03               	skipz
   599  010F  2912               	goto	u315
   600  0110  0818               	movf	___lwmod@divisor,w
   601  0111  021A               	subwf	___lwmod@dividend,w
   602  0112                     u315:	
   603  0112  1C03               	skipc
   604  0113  291A               	goto	l676
   605  0114  0818               	movf	___lwmod@divisor,w
   606  0115  029A               	subwf	___lwmod@dividend,f
   607  0116  0819               	movf	___lwmod@divisor+1,w
   608  0117  1C03               	skipc
   609  0118  039B               	decf	___lwmod@dividend+1,f
   610  0119  029B               	subwf	___lwmod@dividend+1,f
   611  011A                     l676:	
   612  011A  3001               	movlw	1
   613  011B                     u325:	
   614  011B  1003               	clrc
   615  011C  0C99               	rrf	___lwmod@divisor+1,f
   616  011D  0C98               	rrf	___lwmod@divisor,f
   617  011E  3EFF               	addlw	-1
   618  011F  1D03               	skipz
   619  0120  291B               	goto	u325
   620  0121  3001               	movlw	1
   621  0122  029D               	subwf	___lwmod@counter,f
   622  0123  1D03               	btfss	3,2
   623  0124  290C               	goto	l672
   624  0125                     l680:	
   625  0125  081B               	movf	___lwmod@dividend+1,w
   626  0126  0099               	movwf	?___lwmod+1
   627  0127  081A               	movf	___lwmod@dividend,w
   628  0128  0098               	movwf	?___lwmod
   629  0129  0008               	return
   630  012A                     __end_of___lwmod:	
   631                           
   632                           	psect	text3
   633  007F                     __ptext3:	
   634 ;; *************** function ___lwdiv *****************
   635 ;; Defined at:
   636 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;  divisor         2    4[BANK0 ] unsigned int 
   639 ;;  dividend        2    6[BANK0 ] unsigned int 
   640 ;; Auto vars:     Size  Location     Type
   641 ;;  quotient        2    9[BANK0 ] unsigned int 
   642 ;;  counter         1   11[BANK0 ] unsigned char 
   643 ;; Return value:  Size  Location     Type
   644 ;;                  2    4[BANK0 ] unsigned int 
   645 ;; Registers used:
   646 ;;		wreg, status,2, status,0
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMMON   BANK0
   652 ;;      Params:         0       4
   653 ;;      Locals:         0       3
   654 ;;      Temps:          0       1
   655 ;;      Totals:         0       8
   656 ;;Total ram usage:        8 bytes
   657 ;; Hardware stack levels used:    1
   658 ;; Hardware stack levels required when called:    1
   659 ;; This function calls:
   660 ;;		Nothing
   661 ;; This function is called by:
   662 ;;		_DisplayData
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666                           
   667                           ;psect for function ___lwdiv
   668  007F                     ___lwdiv:	
   669                           
   670                           ;incstack = 0
   671                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
   672  007F  1283               	bcf	3,5	;RP0=0, select bank0
   673  0080  0195               	clrf	___lwdiv@quotient
   674  0081  0196               	clrf	___lwdiv@quotient+1
   675  0082  0810               	movf	___lwdiv@divisor,w
   676  0083  0411               	iorwf	___lwdiv@divisor+1,w
   677  0084  1903               	btfsc	3,2
   678  0085  28B7               	goto	l658
   679  0086  0197               	clrf	___lwdiv@counter
   680  0087  0A97               	incf	___lwdiv@counter,f
   681  0088                     l646:	
   682  0088  1B91               	btfsc	___lwdiv@divisor+1,7
   683  0089  2896               	goto	l648
   684  008A  3001               	movlw	1
   685  008B                     u225:	
   686  008B  1003               	clrc
   687  008C  0D90               	rlf	___lwdiv@divisor,f
   688  008D  0D91               	rlf	___lwdiv@divisor+1,f
   689  008E  3EFF               	addlw	-1
   690  008F  1D03               	skipz
   691  0090  288B               	goto	u225
   692  0091  3001               	movlw	1
   693  0092  0094               	movwf	??___lwdiv
   694  0093  0814               	movf	??___lwdiv,w
   695  0094  0797               	addwf	___lwdiv@counter,f
   696  0095  2888               	goto	l646
   697  0096                     l648:	
   698  0096  3001               	movlw	1
   699  0097                     u245:	
   700  0097  1003               	clrc
   701  0098  0D95               	rlf	___lwdiv@quotient,f
   702  0099  0D96               	rlf	___lwdiv@quotient+1,f
   703  009A  3EFF               	addlw	-1
   704  009B  1D03               	skipz
   705  009C  2897               	goto	u245
   706  009D  0811               	movf	___lwdiv@divisor+1,w
   707  009E  0213               	subwf	___lwdiv@dividend+1,w
   708  009F  1D03               	skipz
   709  00A0  28A3               	goto	u255
   710  00A1  0810               	movf	___lwdiv@divisor,w
   711  00A2  0212               	subwf	___lwdiv@dividend,w
   712  00A3                     u255:	
   713  00A3  1C03               	skipc
   714  00A4  28AC               	goto	l654
   715  00A5  0810               	movf	___lwdiv@divisor,w
   716  00A6  0292               	subwf	___lwdiv@dividend,f
   717  00A7  0811               	movf	___lwdiv@divisor+1,w
   718  00A8  1C03               	skipc
   719  00A9  0393               	decf	___lwdiv@dividend+1,f
   720  00AA  0293               	subwf	___lwdiv@dividend+1,f
   721  00AB  1415               	bsf	___lwdiv@quotient,0
   722  00AC                     l654:	
   723  00AC  3001               	movlw	1
   724  00AD                     u265:	
   725  00AD  1003               	clrc
   726  00AE  0C91               	rrf	___lwdiv@divisor+1,f
   727  00AF  0C90               	rrf	___lwdiv@divisor,f
   728  00B0  3EFF               	addlw	-1
   729  00B1  1D03               	skipz
   730  00B2  28AD               	goto	u265
   731  00B3  3001               	movlw	1
   732  00B4  0297               	subwf	___lwdiv@counter,f
   733  00B5  1D03               	btfss	3,2
   734  00B6  2896               	goto	l648
   735  00B7                     l658:	
   736  00B7  0816               	movf	___lwdiv@quotient+1,w
   737  00B8  0091               	movwf	?___lwdiv+1
   738  00B9  0815               	movf	___lwdiv@quotient,w
   739  00BA  0090               	movwf	?___lwdiv
   740  00BB  0008               	return
   741  00BC                     __end_of___lwdiv:	
   742                           
   743                           	psect	text4
   744  0149                     __ptext4:	
   745 ;; *************** function _DisplayDigit *****************
   746 ;; Defined at:
   747 ;;		line 29 in file "newmain.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  data            1    wreg     unsigned char 
   750 ;;  position        1   18[BANK0 ] unsigned char 
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  data            1   20[BANK0 ] unsigned char 
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0
   762 ;;      Params:         0       1
   763 ;;      Locals:         0       1
   764 ;;      Temps:          0       1
   765 ;;      Totals:         0       3
   766 ;;Total ram usage:        3 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    1
   769 ;; This function calls:
   770 ;;		Nothing
   771 ;; This function is called by:
   772 ;;		_DisplayData
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           
   777                           ;psect for function _DisplayDigit
   778  0149                     _DisplayDigit:	
   779                           
   780                           ;incstack = 0
   781                           ; Regs used in _DisplayDigit: [wreg-fsr0h+status,2+status,0]
   782                           ;DisplayDigit@data stored from wreg
   783  0149  1283               	bcf	3,5	;RP0=0, select bank0
   784  014A  00A0               	movwf	DisplayDigit@data
   785                           
   786                           ;newmain.c: 31: PORTA = 1<<position;
   787  014B  3001               	movlw	1
   788  014C  009F               	movwf	??_DisplayDigit
   789  014D  0A1E               	incf	DisplayDigit@position,w
   790  014E  2951               	goto	u204
   791  014F                     u205:	
   792  014F  1003               	clrc
   793  0150  0D9F               	rlf	??_DisplayDigit,f
   794  0151                     u204:	
   795  0151  3EFF               	addlw	-1
   796  0152  1D03               	skipz
   797  0153  294F               	goto	u205
   798  0154  081F               	movf	??_DisplayDigit,w
   799  0155  0085               	movwf	5	;volatile
   800                           
   801                           ;newmain.c: 32: PORTB = digits[data];
   802  0156  0820               	movf	DisplayDigit@data,w
   803  0157  3E24               	addlw	(low (_digits| 0))& (0+255)
   804  0158  0084               	movwf	4
   805  0159  1383               	bcf	3,7	;select IRP bank0
   806  015A  0800               	movf	0,w
   807  015B  0086               	movwf	6	;volatile
   808  015C  0008               	return
   809  015D                     __end_of_DisplayDigit:	
   810                           
   811                           	psect	text5
   812  012A                     __ptext5:	
   813 ;; *************** function _isr *****************
   814 ;; Defined at:
   815 ;;		line 51 in file "newmain.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;		None
   818 ;; Auto vars:     Size  Location     Type
   819 ;;		None
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, status,2, status,0
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMMON   BANK0
   829 ;;      Params:         0       0
   830 ;;      Locals:         0       0
   831 ;;      Temps:          0       4
   832 ;;      Totals:         0       4
   833 ;;Total ram usage:        4 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; This function calls:
   836 ;;		Nothing
   837 ;; This function is called by:
   838 ;;		Interrupt level 1
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           
   843                           ;psect for function _isr
   844  012A                     _isr:	
   845                           
   846                           ;newmain.c: 53: if (INTF){
   847  012A  1C8B               	btfss	11,1	;volatile
   848  012B  2935               	goto	i1l696
   849                           
   850                           ;newmain.c: 54: enabled = ~enabled;
   851  012C  09B2               	comf	_enabled,f	;volatile
   852                           
   853                           ;newmain.c: 55: if (enabled)
   854  012D  0832               	movf	_enabled,w	;volatile
   855  012E  1903               	btfsc	3,2
   856  012F  2934               	goto	i1l694
   857                           
   858                           ;newmain.c: 56: {
   859                           ;newmain.c: 57: seconds = 0;
   860  0130  01AE               	clrf	_seconds	;volatile
   861  0131  01AF               	clrf	_seconds+1	;volatile
   862                           
   863                           ;newmain.c: 58: sub_seconds = 0;
   864  0132  01B0               	clrf	_sub_seconds	;volatile
   865  0133  01B1               	clrf	_sub_seconds+1	;volatile
   866  0134                     i1l694:	
   867                           
   868                           ;newmain.c: 59: }
   869                           ;newmain.c: 60: INTF = 0;
   870  0134  108B               	bcf	11,1	;volatile
   871  0135                     i1l696:	
   872                           
   873                           ;newmain.c: 61: }
   874                           ;newmain.c: 62: if (T0IF){
   875  0135  1D0B               	btfss	11,2	;volatile
   876  0136  293E               	goto	i1l54
   877                           
   878                           ;newmain.c: 63: sub_seconds++;
   879  0137  3001               	movlw	1
   880  0138  07B0               	addwf	_sub_seconds,f	;volatile
   881  0139  1803               	skipnc
   882  013A  0AB1               	incf	_sub_seconds+1,f	;volatile
   883  013B  3000               	movlw	0
   884  013C  07B1               	addwf	_sub_seconds+1,f	;volatile
   885                           
   886                           ;newmain.c: 64: T0IF =0;
   887  013D  110B               	bcf	11,2	;volatile
   888  013E                     i1l54:	
   889  013E  080F               	movf	??_isr+3,w
   890  013F  00CF               	movwf	79
   891  0140  080E               	movf	??_isr+2,w
   892  0141  008A               	movwf	10
   893  0142  080D               	movf	??_isr+1,w
   894  0143  0084               	movwf	4
   895  0144  0E0C               	swapf	??_isr^0,w
   896  0145  0083               	movwf	3
   897  0146  0ECE               	swapf	78,f
   898  0147  0E4E               	swapf	78,w
   899  0148  0009               	retfie
   900  0149                     __end_of_isr:	
   901  004E                     btemp	set	78	;btemp
   902  004E                     wtemp0	set	78
   903                           
   904                           	psect	intentry
   905  0004                     __pintentry:	
   906                           ;incstack = 0
   907                           ; Regs used in _isr: [wreg+status,2+status,0]
   908                           
   909  0004                     interrupt_function:	
   910  004E                     saved_w	set	btemp
   911  0004  00CE               	movwf	btemp
   912  0005  0E03               	swapf	3,w
   913  0006  1283               	bcf	3,5	;RP0=0, select bank0
   914  0007  008C               	movwf	??_isr
   915  0008  0804               	movf	4,w
   916  0009  008D               	movwf	??_isr+1
   917  000A  080A               	movf	10,w
   918  000B  008E               	movwf	??_isr+2
   919  000C  084F               	movf	btemp+1,w
   920  000D  008F               	movwf	??_isr+3
   921  000E  292A               	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     24      39

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_DisplayData
    _DisplayData->_DisplayDigit
    ___lwmod->___lwdiv
    _DisplayDigit->___lwmod

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1354
                        _DisplayData
 ---------------------------------------------------------------------------------
 (1) _DisplayData                                          3     1      2    1354
                                             21 BANK0      3     1      2
                       _DisplayDigit
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     477
                                             12 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     480
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _DisplayDigit                                         3     2      1     256
                                             18 BANK0      3     2      1
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DisplayData
     _DisplayDigit
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     18      27       3       59.1%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      27       6        0.0%
ABS                  0      0      27       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Mar 30 19:56:41 2017

                    l730 00DA                      l654 00AC                      l646 0088  
                    l670 00FE                      l648 0096                      l672 010C  
                    l680 0125                      l658 00B7                      l738 00EB  
                    l676 011A                      _GIE 005F                      u204 0151  
                    u205 014F                      u225 008B                      u315 0112  
                    u245 0097                      u325 011B                      _PS0 0408  
                    u255 00A3                      _PS1 0409                      _PS2 040A  
                    u265 00AD                      u295 0101                      _PSA 040B  
                    _isr 012A                      fsr0 0004                      indf 0000  
                   ?_isr 000C                     _T0IE 005D                     _T0IF 005A  
                   _T0CS 040D                     _T0SE 040C                     _INTE 005C  
                   _INTF 0059                     i1l54 013E                     _TMR0 0001  
                   _main 00BC                     btemp 004E                     start 000F  
                  ??_isr 000C      __end_of_DisplayData 007F                    ?_main 000C  
        __end_of___lwdiv 00BC          __end_of___lwmod 012A                    i1l694 0134  
                  i1l696 0135                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 0010  
           __end_of_main 00F7                   ??_main 0000     __end_of_DisplayDigit 015D  
                 _INTEDG 040E              _DisplayData 002B                   _digits 0024  
              ??___lwdiv 0014                ??___lwmod 001C                   saved_w 004E  
__end_of__initialization 0029           __pcstackCOMMON 0000             __pidataBANK0 015D  
             __pbssBANK0 002E               __pmaintext 00BC               __pintentry 0004  
  __size_of_DisplayDigit 0014     DisplayDigit@position 001E             _DisplayDigit 0149  
                ___lwdiv 007F                  ___lwmod 00F7                  _enabled 0032  
                __ptext1 002B                  __ptext2 00F7                  __ptext3 007F  
                __ptext4 0149                  __ptext5 012A             __size_of_isr 001F  
                _seconds 002E     end_of_initialization 0029          DisplayData@data 0021  
           ?_DisplayData 0021      start_initialization 0010              __end_of_isr 0149  
            __pdataBANK0 0024                ___latbits 0000            __pcstackBANK0 000C  
       ___lwdiv@dividend 0012     __size_of_DisplayData 0054                 ?___lwdiv 0010  
               ?___lwmod 0018         ___lwdiv@quotient 0015        interrupt_function 0004  
       __size_of___lwdiv 003D         __size_of___lwmod 0033          ___lwdiv@divisor 0010  
        ___lwdiv@counter 0017            __size_of_main 003B                 intlevel1 0000  
       ___lwmod@dividend 001A            ?_DisplayDigit 001E         DisplayDigit@data 0020  
        ___lwmod@divisor 0018          ___lwmod@counter 001D           ??_DisplayDigit 001F  
          ??_DisplayData 0023              _sub_seconds 0030  
